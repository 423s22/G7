import React$1, { memo, useCallback, useMemo, useRef } from 'react';
import { classNames } from '../../../../utilities/css.js';
import { useToggle as useToggle$1 } from '../../../../utilities/use-toggle.js';
import styles from '../../IndexTable.scss.js';
import { SelectionType } from '../../../../utilities/index-provider/types.js';
import { useIndexRow, useIndexSelectionChange } from '../../../../utilities/index-provider/hooks.js';
import { RowContext, RowHoveredContext } from '../../../../utilities/index-table/context.js';
import { Checkbox as Checkbox$1 } from '../Checkbox/Checkbox.js';

var _ref = /*#__PURE__*/React$1.createElement(Checkbox$1, null);

const Row = /*#__PURE__*/memo(function Row({
  children,
  selected,
  id,
  position,
  subdued,
  onNavigation
}) {
  const {
    selectMode,
    condensed
  } = useIndexRow();
  const onSelectionChange = useIndexSelectionChange();
  const {
    value: hovered,
    setTrue: setHoverIn,
    setFalse: setHoverOut
  } = useToggle$1(false);
  const rowClassName = classNames(styles.TableRow, condensed && styles.condensedRow, selected && styles['TableRow-selected'], subdued && styles['TableRow-subdued'], hovered && styles['TableRow-hovered']);
  const handleInteraction = useCallback(event => {
    event.stopPropagation();
    if ('key' in event && event.key !== ' ' || !onSelectionChange) return;
    const selectionType = event.nativeEvent.shiftKey ? SelectionType.Multi : SelectionType.Single;
    onSelectionChange(selectionType, !selected, id, position);
  }, [id, onSelectionChange, position, selected]);
  const contextValue = useMemo(() => ({
    itemId: id,
    selected,
    onInteraction: handleInteraction
  }), [id, selected, handleInteraction]);
  const tableRowRef = useRef(null);
  const isNavigating = useRef(false);

  const handleRowClick = event => {
    if (!tableRowRef.current || isNavigating.current) {
      return;
    }

    event.preventDefault();
    event.stopPropagation();
    const primaryLinkElement = tableRowRef.current.querySelector('[data-primary-link]');
    isNavigating.current = true;

    if (primaryLinkElement && !selectMode) {
      const {
        ctrlKey,
        metaKey
      } = event.nativeEvent;

      if (onNavigation) {
        onNavigation(id);
      }

      if ((ctrlKey || metaKey) && primaryLinkElement instanceof HTMLAnchorElement) {
        isNavigating.current = false;
        window.open(primaryLinkElement.href, '_blank');
        return;
      }

      primaryLinkElement.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));
    } else if (selectMode) {
      isNavigating.current = false;
      handleInteraction(event);
    }
  };

  const RowWrapper = condensed ? 'li' : 'tr';
  return /*#__PURE__*/React$1.createElement(RowContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React$1.createElement(RowHoveredContext.Provider, {
    value: hovered
  }, /*#__PURE__*/React$1.createElement(RowWrapper, {
    key: id,
    className: rowClassName,
    onMouseEnter: setHoverIn,
    onMouseLeave: setHoverOut,
    onClick: handleRowClick,
    ref: tableRowRef
  }, _ref, children)));
});

export { Row };
